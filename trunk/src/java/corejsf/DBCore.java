package corejsf;import java.sql.Connection;import javax.faces.model.SelectItem;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.ArrayList;public class DBCore {	/**	 * названия таблиц	 */	private static final String groupTableName 		= "fp_group";	private static final String albumTableName 		= "fp_album";	private static final String performerTableName 	= "fp_performer";	private static final String prizeTableName 		= "fp_prize";		/**	 * создать массив SelectItem по двум ArrayList	 */	public static SelectItem[] convertArrayListToSelectItem (ArrayList value, ArrayList text) {		SelectItem[] items = new SelectItem[value.size ()];		for (int i = 0; i < value.size (); ++ i) {			items[i] = new SelectItem (value.get (i).toString (), text.get (i).toString ());		}		return items;	}		/**	 * достать список всех групп для <select>	 */	public static SelectItem[] getGroups () {		try {			Connection conn = DBController.getConnection();						String sql = "SELECT * FROM " + groupTableName;			PreparedStatement prepareStatement = conn.prepareStatement (sql);			ResultSet result = prepareStatement.executeQuery();						ArrayList groupsId = new ArrayList ();			ArrayList groupsName = new ArrayList ();						groupsId.add ("0");			groupsName.add ("Выберите группу");			while (result.next ()) {				groupsId.add (result.getInt ("id"));				groupsName.add (result.getString ("name"));			}						conn.close ();						return convertArrayListToSelectItem (groupsId, groupsName);		}		catch (Exception e) {			System.out.println ("Error in get list groups: " + e);		}		return null;	}		/**	 * достать список всех исполнителей для <select>	 */	public static SelectItem[] getPerformers () {		try {			Connection conn = DBController.getConnection();						String sql = "SELECT * FROM " + performerTableName + " ORDER BY surname, name";			PreparedStatement prepareStatement = conn.prepareStatement (sql);			ResultSet result = prepareStatement.executeQuery();						ArrayList performerId = new ArrayList ();			ArrayList performerName = new ArrayList ();						performerId.add ("0");			performerName.add ("Выберите исполнителя");			while (result.next ()) {				performerId.add (result.getInt ("id"));				performerName.add (result.getString ("surname") + " " + result.getString ("name"));			}						conn.close ();						return convertArrayListToSelectItem (performerId, performerName);		}		catch (Exception e) {			System.out.println ("Error in get list performers: " + e);		}		return null;	}		/**	 * достать список всех наград для <select>	 */	public static SelectItem[] getPrizes () {		try {			Connection conn = DBController.getConnection();						String sql = "SELECT * FROM " + prizeTableName;			PreparedStatement prepareStatement = conn.prepareStatement (sql);			ResultSet result = prepareStatement.executeQuery();						ArrayList prizesId = new ArrayList ();			ArrayList prizesName = new ArrayList ();						prizesId.add ("0");			prizesName.add ("Выберите награду");			while (result.next ()) {				prizesId.add (result.getInt ("id"));				prizesName.add (result.getString ("name") + " " + Utils.toNormDate (result.getString ("award_date")));			}						conn.close ();						return convertArrayListToSelectItem (prizesId, prizesName);		}		catch (Exception e) {			System.out.println ("Error in get list prizes: " + e);		}		return null;	}		/**	 * достать список всех альбомов группы для <select>	 */	public static SelectItem[] getAlbums (int groupId) {		try {			Connection conn = DBController.getConnection();						String sql = "SELECT * FROM " + albumTableName + " WHERE group_id=?";			PreparedStatement prepareStatement = conn.prepareStatement (sql);			prepareStatement.setString (1, groupId + "");			ResultSet result = prepareStatement.executeQuery();						ArrayList albumsId = new ArrayList ();			ArrayList albumsName = new ArrayList ();						albumsId.add ("0");			albumsName.add ("Выберите альбом");			while (result.next ()) {				albumsId.add (result.getInt ("id"));				albumsName.add (result.getString ("name"));			}						conn.close ();						return convertArrayListToSelectItem (albumsId, albumsName);		}		catch (Exception e) {			System.out.println ("Error in get list albums: " + e);		}		return null;	}}